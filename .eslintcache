[{"/media/doc/It-kamasutra/register-form/src/index.tsx":"1","/media/doc/It-kamasutra/register-form/src/components/button/Button.tsx":"2","/media/doc/It-kamasutra/register-form/src/components/input/CustomInput.tsx":"3","/media/doc/It-kamasutra/register-form/src/inputHook/UseInput.tsx":"4","/media/doc/It-kamasutra/register-form/src/components/select/CustomSelect.tsx":"5","/media/doc/It-kamasutra/register-form/src/components/form/Form.tsx":"6","/media/doc/It-kamasutra/register-form/src/components/checkbox/CustomCheckbox.tsx":"7","/media/doc/It-kamasutra/register-form/src/components/select/languageList.ts":"8","/media/doc/It-kamasutra/register-form/src/utils/validations.ts":"9","/media/doc/It-kamasutra/register-form/src/App.tsx":"10"},{"size":500,"mtime":1607269528347,"results":"11","hashOfConfig":"12"},{"size":454,"mtime":1611429799662,"results":"13","hashOfConfig":"12"},{"size":1820,"mtime":1611583397354,"results":"14","hashOfConfig":"12"},{"size":1378,"mtime":1611508644628,"results":"15","hashOfConfig":"12"},{"size":1918,"mtime":1611521931790,"results":"16","hashOfConfig":"12"},{"size":2771,"mtime":1611582637749,"results":"17","hashOfConfig":"12"},{"size":893,"mtime":1611583243986,"results":"18","hashOfConfig":"12"},{"size":147,"mtime":1611521870200,"results":"19","hashOfConfig":"12"},{"size":588,"mtime":1611507540673,"results":"20","hashOfConfig":"12"},{"size":214,"mtime":1611583019118,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1efhd8i",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/media/doc/It-kamasutra/register-form/src/index.tsx",[],["44","45"],"/media/doc/It-kamasutra/register-form/src/components/button/Button.tsx",[],"/media/doc/It-kamasutra/register-form/src/components/input/CustomInput.tsx",["46"],"/media/doc/It-kamasutra/register-form/src/inputHook/UseInput.tsx",["47"],"/media/doc/It-kamasutra/register-form/src/components/select/CustomSelect.tsx",["48"],"/media/doc/It-kamasutra/register-form/src/components/form/Form.tsx",["49","50"],"import {FormEvent, useState} from 'react';\r\nimport {useInput} from '../../inputHook/UseInput';\r\nimport {emailValidation, passwordValidations, phoneValidations} from '../../utils/validations';\r\nimport Button from '../button/Button';\r\nimport CustomInput from '../input/CustomInput';\r\nimport Select from '../select/CustomSelect';\r\nimport s from './Form.module.scss';\r\nimport CustomCheckbox from \"../checkbox/CustomCheckbox\";\r\n\r\n\r\nconst Form = () => {\r\n\r\n    const name = useInput('', {isEmpty: true});\r\n    const email = useInput('', {...emailValidation});\r\n    const language = useInput('', {});\r\n    const phone = useInput('', {...phoneValidations})\r\n    const [isAgree, setIsAgree] = useState<boolean>(false)\r\n\r\n\r\n    const agreeCheckHandler = (check: boolean) => {\r\n        setIsAgree(check)\r\n    }\r\n\r\n    let isSubmitDisabled: boolean =\r\n        name.errorMessage === ''\r\n        && email.errorMessage === ''\r\n        && phone.errorMessage === ''\r\n        && isAgree\r\n    ;\r\n\r\n    const submitHandler = (e: FormEvent) => {\r\n        e.preventDefault()\r\n        const data = {\r\n            name: name.value,\r\n            email: email.value,\r\n            phone: phone.value,\r\n            language: language.value,\r\n            isAgree: isAgree\r\n        }\r\n        console.log(data)\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.title}>\r\n                <h1> Регистрация </h1>\r\n                <span>Уже есть аккаунт? <a href=\"#\">войти</a></span>\r\n            </div>\r\n            <form onSubmit={submitHandler}>\r\n                <CustomInput\r\n                    text={name.value}\r\n                    label={'Имя'}\r\n                    errorText={name.errorMessage}\r\n                    onChangeValueHandler={name.changeValueHandler}\r\n                    type={'text'}/>\r\n                <CustomInput\r\n                    text={email.value}\r\n                    label={'Email'}\r\n                    onChangeValueHandler={email.changeValueHandler}\r\n                    type={'text'}\r\n                    errorText={email.errorMessage}\r\n                />\r\n                <CustomInput\r\n                    text={`${phone.value}`}\r\n                    label={'Телфон'}\r\n                    errorText={phone.errorMessage}\r\n                    onChangeValueHandler={phone.changeValueHandler}\r\n                    type={'text'}\r\n                />\r\n                <Select errorText={''} languageValue={language.changeValueHandler}/>\r\n                <CustomCheckbox checkCallBack={agreeCheckHandler}/>\r\n                <Button\r\n                    title={'title'}\r\n                    isDisabled={!isSubmitDisabled}/>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Form;","/media/doc/It-kamasutra/register-form/src/components/checkbox/CustomCheckbox.tsx",["51"],"/media/doc/It-kamasutra/register-form/src/components/select/languageList.ts",[],"/media/doc/It-kamasutra/register-form/src/utils/validations.ts",[],"/media/doc/It-kamasutra/register-form/src/App.tsx",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":14,"column":12,"nodeType":"58","messageId":"59","endLine":14,"endColumn":19},{"ruleId":"60","severity":1,"message":"61","line":43,"column":6,"nodeType":"62","endLine":43,"endColumn":13,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":51,"column":21,"nodeType":"66","endLine":51,"endColumn":42},{"ruleId":"56","severity":1,"message":"67","line":3,"column":26,"nodeType":"58","messageId":"59","endLine":3,"endColumn":45},{"ruleId":"68","severity":1,"message":"69","line":47,"column":41,"nodeType":"66","endLine":47,"endColumn":53},{"ruleId":"68","severity":1,"message":"69","line":26,"column":30,"nodeType":"66","endLine":26,"endColumn":42},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"@typescript-eslint/no-unused-vars","'isDarty' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'validations.errorMesage', 'validations.isEmpty', 'validations.maxLength', 'validations.minLength', and 'validations.pattern'. Either include them or remove the dependency array. If 'setErrorMessage' needs the current value of 'validations.maxLength', you can also switch to useReducer instead of useState and read 'validations.maxLength' in the reducer.","ArrayExpression",["72"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'passwordValidations' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [validations.errorMesage, validations.isEmpty, validations.maxLength, validations.minLength, validations.pattern, value]",{"range":"75","text":"76"},[1298,1305],"[validations.errorMesage, validations.isEmpty, validations.maxLength, validations.minLength, validations.pattern, value]"]